https://mariadb.com/kb/en/mariadb/yum/

DATABASE mechanica{
	users{
		id(INT PRIMARY, AUTO_INCREMENT), username(VARCHAR(20) UNIQUE not null), password, email(UNIQUE), creation_date (DATE), description TEXT
		
		CREATE TABLE IF NOT EXISTS users(
			user_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
			name VARCHAR(20) NOT NULL,
			password TEXT NOT NULL,
			email VARCHAR(254) NOT NULL,
			creation_date DATE NOT NULL,
			description TEXT DEFAULT NULL,
			
			PRIMARY KEY(user_id),
			UNIQUE KEY ind_uni_name(name),
			UNIQUE KEY ind_uni_email(email)
		)
		CHARSET=utf8 
		ENGINE=INNODB;
	}
	repos{
		id(INT PRIMARY), admin(INT FOREIGN KEY ref(users.id)), 
		directory_location (TINYTEXT UNIQUE)
		( // don't store everything in the same directory, and keep relative path in db)
		https://stackoverflow.com/questions/154707/what-is-the-best-way-to-store-media-files-on-a-database
		discussion list TEXT (list of id leading into an discussion table)
		
		CREATE TABLE IF NOT EXISTS repos(
			repo_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
			location TINYTEXT NOT NULL,
			discussion_list TEXT,
			
			PRIMARY KEY(repo_id)
		) CHARSET=utf8 ENGINE=INNODB;
	}
	discussions {
		id (PRIMARY KEY), title TEXT, creator_id (INT FOREIGN KEY ref(users.id)), created_at DATETIME,message_list TEXT, hosting_repo(just in case) (INT FOREIGN KEY ref(repos.id))
		
		CREATE TABLE IF NOT EXISTS discussions(
			discussion_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
			title TEXT NOT NULL,
			creator_id INT UNSIGNED,
			created_at DATETIME NOT NULL,
			hosting_repo INT UNSIGNED NOT NULL,
			message_list TEXT,
			
			PRIMARY KEY(discussion_id)
		) CHARSET=utf8 ENGINE=INNODB;
		ALTER TABLE discussions ADD CONSTRAINT fk_discussion_creator_id FOREIGN KEY (creator_id) REFERENCES users (user_id) ON DELETE SET NULL ON UPDATE CASCADE;
		ALTER TABLE discussions ADD CONSTRAINT fk_discussion_hosting_repo FOREIGN KEY (hosting_repo) REFERENCES repos (repo_id) ON DELETE CASCADE ON UPDATE CASCADE;
		
	}
	discussion_messages{
		id (PRIMARY KEY), content TEXT, creator_id INT FOREIGN KEY ref(users.id), created_at DATETIME, discussion_id (INT FOREIGN KEY ref(discussions.id)) 
		
		CREATE TABLE IF NOT EXISTS discussion_messages(
			discussion_message_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
			content TEXT NOT NULL,
			creator_id INT UNSIGNED,
			created_at DATETIME NOT NULL,
			hosting_discussion INT UNSIGNED NOT NULL,
			
			PRIMARY KEY(discussion_message_id)
		) ENGINE=INNODB CHARSET=utf8;
		ALTER TABLE discussion_messages ADD CONSTRAINT fk_discussion_messages_creator_id FOREIGN KEY (creator_id) REFERENCES users (user_id) ON DELETE SET NULL ON UPDATE CASCADE;
		ALTER TABLE discussion_messages ADD CONSTRAINT fk_111 FOREIGN KEY (hosting_discussion) REFERENCES discussions (discussion_id) ON DELETE CASCADE ON UPDATE CASCADE;
	}
}

fork : copy the content of the forked directory to a new directory 
Clone : do nothing, just send the content of the directory to the client
push : detect what files change compared to the old version, replace thoses file in a new folder, for the unchanged files create a simlink
merge A into B : detect which file changed in A compared to B and only change thoses
change detection : hash the file and compare 

repo folder structure;
reponame
	v0
		filev0_1
		filev0_2
		...
	v1
		...
	v2
	...
	v145
	current
		[repo content]
		file1
		file2
		file3
		...
		
the current folder ALWAYS contains the current version of the project, but
the current version may contain files that are actually simlinks to older versions

pour le rendu 3D : quand on recoit un fichier le convertir avec blender en .obj et extraire l'array de vertex et de triangle dans un fichier custom, 
il sera envoy√© au script webgl pour le rendu